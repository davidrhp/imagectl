name: Rust Cross-Platform Builds

on:
  push:
    branches:
      - main

  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to build from'
        required: true
        default: 'master'
      target:
        description: 'Target architecture to build for'
        required: true
        default: 'all'
        type: choice
        options:
          - all                 # Build all platforms (default)
          - x86_64-unknown-linux-gnu # Linux Intel
          - aarch64-unknown-linux-gnu # Linux ARM
          - x86_64-apple-darwin # macOS Intel
          - aarch64-apple-darwin # macOS ARM
          - x86_64-pc-windows-msvc # Windows Intel GNU

jobs:
  build:
    runs-on: ${{ matrix.runner }}
    timeout-minutes: 30

    strategy:
      matrix:
        include:
          - target: aarch64-unknown-linux-gnu
            runner: ubuntu-24.04-arm
          - target: x86_64-unknown-linux-gnu
            runner: ubuntu-latest
          - target: aarch64-apple-darwin
            runner: macos-latest
          - target: x86_64-apple-darwin
            runner: macos-13
          - target: x86_64-pc-windows-msvc
            runner: windows-latest

    steps:
      - name: Check Target Compatibility
        id: gatekeeper
        run: |
          echo "Selected input target: ${{ github.event.inputs.target }}"
          echo "Current job matrix target: ${{ matrix.target }}"

          if [[ "${{ github.event.inputs.target }}" != "all" && "${{ github.event.inputs.target }}" != "${{ matrix.target }}" ]]; then
            echo "Skipping job because targets are incompatible."
            echo "::set-output name=status::skip"
            exit 0
          else
            echo "Targets are compatible, continuing job."
            echo "::set-output name=status::continue"
          fi

        shell: bash

      - name: Install Dependencies
        if: steps.gatekeeper.outputs.status == 'continue'
        run: |
          if [[ "${{ matrix.runner }}" =~ ^macos.* ]]; then
            echo "Installing libdav1d on macOS with Homebrew..."
            brew install dav1d
          elif [[ "${{ matrix.runner }}" =~ ^ubuntu.* ]]; then
            echo "Installing libdav1d on Ubuntu with APT..."
            sudo apt-get update
            sudo apt-get install -y libdav1d-dev
          elif [[ "${{ matrix.runner }}" =~ ^windows.* ]]; then
            echo "Installing dav1d on Windows with vcpkg..."
          
            # Check if the vcpkg directory already exists; if not, clone it.
            if [ ! -d "C:/vcpkg" ]; then
            git clone https://github.com/microsoft/vcpkg.git C:/vcpkg
            else
            echo "vcpkg directory already exists, skipping clone."
            fi
          
            cd C:/vcpkg
          
            # Bootstrap vcpkg if it hasn't been bootstrapped yet
            if [ ! -f "vcpkg.exe" ]; then
            echo "Bootstrapping vcpkg..."
            ./bootstrap-vcpkg.bat
            else
            echo "vcpkg already bootstrapped."
            fi
          
            # Install dav1d via vcpkg
            ./vcpkg.exe install dav1d
          else
            echo "Unsupported OS for libdav1d installation!"
            exit 1
          fi
        shell: bash

      - name: Install Rustup
        if: steps.gatekeeper.outputs.status == 'continue'
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Add Target
        if: steps.gatekeeper.outputs.status == 'continue'
        run: rustup target add ${{ matrix.target }}

      - name: Checkout code
        if: steps.gatekeeper.outputs.status == 'continue'
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.branch }}

      - name: Build on Windows (MSVC)
        if: runner.os == 'Windows' && steps.gatekeeper.outputs.status == 'continue'
        env:
          DAV1D_NO_PKG_CONFIG: "1"
        run: cargo build --release --target=${{ matrix.target }}

      - name: Build
        if: runner.os != 'Windows' && steps.gatekeeper.outputs.status == 'continue'
        run: cargo build --release --target=${{ matrix.target }}

      - name: Upload Artifact
        if: steps.gatekeeper.outputs.status == 'continue'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target }}-binary
          path: target/${{ matrix.target }}/release/imagectl